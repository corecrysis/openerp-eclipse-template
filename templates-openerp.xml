<?xml version="1.0" encoding="UTF-8"?><templates><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_columns" enabled="true" name="_columns">_columns = {
		${cursor}
				}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_constraints" enabled="true" name="_constraints">def ${_check_metho}(self, cr, user, ids): 
#TODO : check condition and return boolean accordingly
	return True
_constraints = [(${_check_metho}, 'Error: Invalid Message', ['${field_name}']), ] ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_date_name" enabled="true" name="_date_name">_date_name = '${data}' ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_defaults" enabled="true" name="_defaults">_defaults = {  
	'${datee}': lambda *a: time.strftime('%Y-%m-%d'),  ${cursor}
	}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_description" enabled="true" name="_description">_description = '${__doc__}' ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_inherit" enabled="true" name="_inherit">_inherit = '${openerpmodel}' 
#Do not touch _name it must be same as _inherit
#_name = '${openerpmodel}' ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_inherits" enabled="true" name="_inherits">_inherits = {  '${openerpmodel}': '${model_id}'  ${cursor} }</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_name" enabled="true" name="_name">_name = '${openerp}' ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_order" enabled="true" name="_order">_order = '${id}' ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_parent_store" enabled="true" name="_parent_store">_parent_store = ${False} ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_rec_name" enabled="true" name="_rec_name">_rec_name = '${name}' ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_sequence" enabled="true" name="_sequence">_sequence = ${data} ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_sql_constraints" enabled="true" name="_sql_constraints">_sql_constraints = [ 	('name_uniq', 'unique (name)', 'The Name of the OpenERPModel must be unique !'), 	${cursor} ]</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="_table" enabled="true" name="_table">_table = '${openerp_model}' ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def action_workflow" enabled="true" name="def action_workflow">def action_cancel(self, cr, user, ids, *args): 
#TODO : Business Process 	return result ${cursor}
	result = True</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def copy" enabled="true" name="def copy">def copy(self, cr, uid, id, default=None, context=None): 
	res_id = super(${ModelName}, self).copy(cr, uid, id, default, context)
	return res_id ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def create" enabled="true" name="def create">def create(self, cr, user, vals, context={}):
	res_id = super(${ModelName}, self).create(cr, user, vals, context)
	return res_id ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def default_get" enabled="true" name="def default_get">def default_get(self, cr, user, fields_list, context=None):
	values = {} 
	${cursor}
	return values</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def fields_get" enabled="true" name="def fields_get">def fields_get(self, cr, user, fields=None, context=None):
	return super(${ModelName}, self).fields_get(cr, user, fields, context, read_access) 
	${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def fields_view_get" enabled="true" name="def fields_view_get">def fields_view_get(self, cr, user, view_id=None, view_type='form', context=None, toolbar=False):
	res = super(${ModelName}, self).fields_view_get(cr, user, view_id, view_type, context, toolbar)
	return res</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def name_get" enabled="true" name="def name_get">def name_get(self, cr, user, ids, context=None):
	#TODO : search on name field or _res_name fields 
	#and make a result [(id, name), (id, name), ...] 
	res = self.read(cr, user, ids, [self._rec_name], context, load='_classic_write')]
	return res ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def name_search" enabled="true" name="def name_search">def name_search(self, cr, user, name, args=None, operator='ilike', context=None, limit=80):
	#TODO: make a search on specific fields and get ids     
	 if not args:
        args=[]
    if not context:
        context={}
    ids = []
    if name:
        ids = self.search(cr, user, [('code','ilike',name)]+ args, limit=limit)
    if not ids:
        ids = self.search(cr, user, [('name',operator,name)]+ args, limit=limit)
    self.name_get(cr, user, ids, context=context)${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def on_change" enabled="true" name="def on_change">def onchange_${fields}(self, cr, user, ${fields}, context=None):
	#TODO : compute new values from the db/system
	${cursor}
	return {   'field_1': res1   'field_2': res }</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def read" enabled="true" name="def read">def read(self, cr, user, ids, fields=None, context=None, load='_classic_read'):
	res = super(${ModelName}, self).read(cr, user, ids, fields, context) 
	#TODO : process on result
	return res ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def search" enabled="true" name="def search">def search(self, cr, user, args, offset=0, limit=None, order=None, context=None, count=False):
	#TODO : process on args before search
	res = super(${ModelName}, self).search(cr, user, args, offset, limit, order, context, count)
	#TODO : process</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def unlink" enabled="true" name="def unlink">def unlink(self, cr, uid, ids, context=None):
	#TODO: process before delete resource
	res = super(${ModelName}, self).unlink(cr, uid, ids, context)
	return res ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def write" enabled="true" name="def write">def write(self, cr, user, ids, vals, context=None):
	#TODO: process before updating resource
	res = super(${ModelName}, self).write(cr, user, ids, vals, context)
	return res ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Field Attribute : domain" enabled="true" name="Field Attribute : domain">domain=[('${state}','=','${done}'), ${cursor}]</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Field Attribute : help" enabled="true" name="Field Attribute : help">help='${HelpAboutField}', ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Field Attribute : readonly" enabled="true" name="Field Attribute : readonly">readonly=True, ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Field Attribute : required" enabled="true" name="Field Attribute : required">required=True, ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Field Attribute : select" enabled="true" name="Field Attribute : select">select = True, ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Field Attribute : store" enabled="true" name="Field Attribute : store">store={
	#TODO : define model and function call for store field 
	'${field_name}': (_get_invoice_from_line, None, 50),
	}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Field States" enabled="true" name="Field States">states={'${draft}':[('readonly',${False})${cursor}]}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.binary" enabled="true" name="fields.binary">${file}':fields.binary('${Label}', filters=${None}), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.boolean" enabled="true" name="fields.boolean">${name}':fields.boolean('${Label}', required=${False}), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.char" enabled="true" name="fields.char">${name}':fields.char('${2:Label}', size=${3:64}, required=${4:False}, readonly=${5:False}), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.date" enabled="true" name="fields.date">#TODO : import time required to get currect date
'${date}': fields.date('${Date}'), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.datetime" enabled="true" name="fields.datetime">#TODO : import time required to get currect datetime
'${datetime}': fields.datetime('${Date}'), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.float" enabled="true" name="fields.float">${number}': fields.float('${Label}', digits=(${16}, int(config['price_accuracy'])), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.function" enabled="true" name="fields.function">${data}': fields.function(${_function_call}, method=True, type='${float}' string='${Label}', store=${True}), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.integer" enabled="true" name="fields.integer">${number}': fields.integer('${Label}') ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.integer_big" enabled="true" name="fields.integer_big">${number}': fields.integer_big('${Label}') ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.many2many" enabled="true" name="fields.many2many">${data}_ids':fields.one2many('${OpenerpModel}', '${partner}_${category}_rel', ${model1}_id', ${model2}_id', ${Label}'), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.many2one" enabled="true" name="fields.many2one">${data}_id':fields.many2one('${OpenerpModel}', '${Label}', required=${False}), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.one2many" enabled="true" name="fields.one2many">${data}_ids':fields.one2many('${OpenerpModel}', '${field}_id', '${Label}', required=${False}), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.property" enabled="true" name="fields.property">'property_${name}': fields.property( 
	'${OpenerpModel}',
	type='${many2one}',
	relation='${openerpmodel}',
	string='${Label}',
	method=True,
	view_load=True,
	domain='[('${state}','=','${done}')]',
	help="${Helpdescrip}"
	required=${10:True}),</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.reference" enabled="true" name="fields.reference">${ref}': fields.reference('${Document}', 
	selection=[
	#TODO : define list of model and Label that will be work as a reference
	('account.account', 'Account'),
	${cursor} 	], size=${128}),</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.related" enabled="true" name="fields.related">${field}_id': fields.related('${relation_field}','${field}_id', type='${many2one}', relation='${openerpmodel}', string=${Label}'), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.selection : [(draft, Draft)]" enabled="true" name="fields.selection : [(draft, Draft)]">${state}':fields.selection([
	('draft','Draft'),
	('done','Done'),
	${cursor} ],	'${State}', select=True, readonly=${True}),</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.selection [def _select_data]" enabled="true" name="fields.selection [def _select_data]">${state}': fields.selection(${_get_states}, '${data}', required=${True}), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.text" enabled="true" name="fields.text">${note}': fields.text('${Description}'), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="fields.time" enabled="true" name="fields.time">#TODO : import time required to get currect time
'${date}': fields.time('${Time}'), ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="New OpenERP Method" enabled="true" name="New OpenERP Method">def ${method}_${name}(self, cr, uid, ids):
	result = None
	#TODO : OpenERP Business Process 
	${cursor}
	return result</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="OpenERP : model" enabled="true" name="OpenERP : model">from osv import osv
from osv import fields

class ${ClassName}(osv.osv):
 '''
 Open ERP Model
 '''
	_name = '${openerpmodel}'
	_description = '${openerpmodel}'
 
	_columns = {
			'${name}':fields.char('${data}', size={64}, required={False}, readonly={False}),
			${cursor}
		}
${ClassName}()</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="OpenERP License" enabled="true" name="OpenERP License">
##############################################################################
#
#    OpenERP, Open Source Management Solution    
#    Copyright (C) 2004-2009 Tiny SPRL (http://tiny.be). All Rights Reserved
#    
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see http://www.gnu.org/licenses/.
#
##############################################################################
</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="OpenERP wizard" enabled="true" name="OpenERPwizard">import wizard
import pooler

class ${SendEmail}(wizard.interface):
	 '''
	 OpenERP Wizard
	 '''
	 ${form} = '''
			&lt;?xml version="1.0"?&gt;
			&lt;form string="Process Form"&gt;
			&lt;field name="${field}"/&gt;
			&lt;/form&gt;  '''

	 ${fields} = {
			'${field}': {'string': '${Label}', 'type': 'many2one', 'relation': 'res.company'},
		}

	 def ${_get_defaults}(self, cr, user, data, context):
		#TODO : initlize required data
		${cursor}
		return data['form'] 

	 def ${_do_duplicate}(self, cr, uid, data, context):
		pool = pooler.get_pool(cr.dbname)
		return {}
		
	 states = {
		'init': {
			'actions': [${_get_defaults}],
			'result': {'type': 'form', 'arch': ${form}, 'fields': ${fields}, 'state': (('end', 'Cancel'), ('${process}', 'Process'))},
		},
		'${process}': {
			'actions': [${_do_duplicate}],
			'result': {'type': 'state', 'state': 'end'},
		},
	}
${SendEmail}('${modelprocess}')</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="test" enabled="true" name="test">${name} = Char(${name}${data})</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard state : end" enabled="true" name="wizard state : end">'${check}': {
	'actions': [],
	'result': {'type':'choice','next_state':self.${_check_condition}}
	#TODO : define def ${_check_condition}(self, cr, user, data, context):
	},
${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard States : choice" enabled="true" name="wizard States : choice">'${check}': {
	'actions': [],
	'result': {'type':'choice','next_state':self.${_check_condition}}
	#TODO : define def ${_check_condition}(self, cr, user, data, context): }, ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard States : form" enabled="true" name="wizard States : form">'${form}': {
	'actions': [],
	'result': {'type': 'form', 'arch': form, 'fields': fields, 'state': (('end', 'Cancel'), ('process', 'Process'))},
	}, ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="wizard States : print" enabled="true" name="wizard States : print">'${report}':{
	'actions': [],
	'result': {'type':'print', 'report':'${modelreportname}', 'state':'${end}'}
	}, ${cursor}</template>
<template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="__terp__" enabled="true" name="__terp__">{
    "name": "${name}",
    "version": "1.0",
    "depends": ["base"],
    "author": "${author}",
    "category": "${category}",
    "description": """
    This module provide :
    ${cursor}
    """,
    "init_xml": ["${cursor}"],
    'update_xml': ["${cursor}"],
    'demo_xml': ["${cursor}"],
    'installable': True,
    'active': False,
#    'certificate': '${certificate}',
}</template>
</templates>